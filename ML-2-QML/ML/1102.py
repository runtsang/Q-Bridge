from __future__ import annotations

import torch
from torch import nn
from dataclasses import dataclass
from typing import Iterable, Sequence, List

@dataclass
class FraudLayerParameters:
    bs_theta: float
    bs_phi: float
    phases: tuple[float, float]
    squeeze_r: tuple[float, float]
    squeeze_phi: tuple[float, float]
    displacement_r: tuple[float, float]
    displacement_phi: tuple[float, float]
    kerr: tuple[float, float]
    dropout_rate: float = 0.0

def _clip(value: float, bound: float) -> float:
    return max(-bound, min(bound, value))

def _layer_from_params(params: FraudLayerParameters, *, clip: bool) -> nn.Module:
    weight = torch.tensor(
        [
            [params.bs_theta, params.bs_phi],
            [params.squeeze_r[0], params.squeeze_r[1]],
        ],
        dtype=torch.float32,
    )
    bias = torch.tensor(params.phases, dtype=torch.float32)
    if clip:
        weight = weight.clamp(-5.0, 5.0)
        bias = bias.clamp(-5.0, 5.0)
    linear = nn.Linear(2, 2)
    with torch.no_grad():
        linear.weight.copy_(weight)
        linear.bias.copy_(bias)
    activation = nn.Tanh()
    scale = torch.tensor(params.displacement_r, dtype=torch.float32)
    shift = torch.tensor(params.displacement_phi, dtype=torch.float32)

    class Layer(nn.Module):
        def __init__(self) -> None:
            super().__init__()
            self.linear = linear
            self.activation = activation
            self.register_buffer("scale", scale)
            self.register_buffer("shift", shift)
            if params.dropout_rate > 0.0:
                self.dropout = nn.Dropout(p=params.dropout_rate)
            else:
                self.dropout = nn.Identity()

        def forward(self, inputs: torch.Tensor) -> torch.Tensor:
            outputs = self.activation(self.linear(inputs))
            outputs = outputs * self.scale + self.shift
            outputs = self.dropout(outputs)
            return outputs

    return Layer()

def build_fraud_detection_program(
    input_params: FraudLayerParameters,
    layers: Iterable[FraudLayerParameters],
) -> nn.Sequential:
    modules = [_layer_from_params(input_params, clip=False)]
    modules.extend(_layer_from_params(layer, clip=True) for layer in layers)
    modules.append(nn.Linear(2, 1))
    return nn.Sequential(*modules)

class FraudDetectionModel(nn.Module):
    """
    Classical fraud‑detection model with optional dropout and parameter conversion
    for hybrid experiments.  The model is built from a list of FraudLayerParameters
    and exposes utilities for synthetic data generation and mapping to the quantum
    counterpart.
    """

    def __init__(self, input_params: FraudLayerParameters, layers: List[FraudLayerParameters]) -> None:
        super().__init__()
        self.input_params = input_params
        self.layers = layers
        self.model = build_fraud_detection_program(input_params, layers)

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        return self.model(x)

    def to_quantum_params(self) -> List[FraudLayerParameters]:
        """
        Convert the classical layer parameters to a list suitable for the quantum
        implementation.  Dropout information is discarded as the quantum model
        operates deterministically.
        """
        return [self.input_params] + self.layers

    @staticmethod
    def generate_synthetic_data(n_samples: int = 1000, seed: int | None = None) -> tuple[torch.Tensor, torch.Tensor]:
        """
        Produce a toy dataset of 2‑dimensional inputs and binary fraud labels.
        The labels are generated by a simple linear decision boundary with noise.
        """
        rng = torch.Generator() if seed is None else torch.Generator().manual_seed(seed)
        X = torch.randn(n_samples, 2, generator=rng)
        logits = X @ torch.tensor([1.5, -2.0])
        probs = torch.sigmoid(logits)
        y = torch.bernoulli(probs).unsqueeze(-1)
        return X, y

__all__ = ["FraudLayerParameters", "build_fraud_detection_program", "FraudDetectionModel"]
