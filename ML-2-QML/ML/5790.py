"""Hybrid classical graph neural network with end‑to‑end training.

The classical part is a simple feed‑forward network built with PyTorch.
It can be trained on synthetic data generated by :func:`random_network`.
A fidelity‑based adjacency graph can be built from the learned states.
"""

from __future__ import annotations

import itertools
from collections.abc import Iterable, Sequence
from typing import List, Tuple

import numpy as np
import networkx as nx
import torch
import torch.nn.functional as F
from torch import Tensor

__all__ = [
    "GraphQNN",
    "random_network",
    "random_training_data",
    "random_state_vector",
]


def _random_linear(in_features: int, out_features: int) -> Tensor:
    """Generate a random weight matrix for a linear layer."""
    return torch.randn(out_features, in_features, dtype=torch.float32)


def random_state_vector(dim: int = 2, seed: int | None = None) -> Tensor:
    """Generate a random unit vector in ``float32``."""
    rng = np.random.default_rng(seed)
    vec = rng.standard_normal(dim) + 1j * rng.standard_normal(dim)
    norm = np.linalg.norm(vec)
    return torch.from_numpy(vec / norm).float()


def random_training_data(weight: Tensor, samples: int) -> List[Tuple[Tensor, Tensor]]:
    """Return a list of (feature, target) tuples."""
    dataset: List[Tuple[Tensor, Tensor]] = []
    for _ in range(samples):
        features = torch.randn(weight.size(1), dtype=torch.float32)
        target = weight @ features
        dataset.append((features, target))
    return dataset


def random_network(qnn_arch: Sequence[int], samples: int):
    """Generate a random network and a synthetic training set."""
    weights: List[Tensor] = []
    for in_f, out_f in zip(qnn_arch[:-1], qnn_arch[1:]):
        weights.append(_random_linear(in_f, out_f))
    target_weight = weights[-1]
    training_data = random_training_data(target_weight, samples)
    return list(qnn_arch), weights, training_data, target_weight


class GraphQNN:
    """Classical graph‑neural‑network with trainable feed‑forward layers."""

    def __init__(self, arch: Sequence[int], device: str = "cpu"):
        self.arch = list(arch)
        self.device = device
        self.weights: List[Tensor] = [
            w.to(device) for w in _random_linear(in_f, out_f)
            for in_f, out_f in zip(self.arch[:-1], self.arch[1:])
        ]

    def forward(self, x: Tensor) -> List[Tensor]:
        """Return all layer activations for a single input."""
        activations: List[Tensor] = [x]
        for w in self.weights:
            x = torch.tanh(w @ x)
            activations.append(x)
        return activations

    def predict(self, x: Tensor) -> Tensor:
        """Return the final layer output."""
        return self.forward(x)[-1]

    def train(
        self,
        dataset: List[Tuple[Tensor, Tensor]],
        lr: float = 1e-3,
        epochs: int = 10,
        verbose: bool = False,
    ) -> List[float]:
        """Train the network with MSE loss."""
        opt = torch.optim.Adam(self.weights, lr=lr)
        losses: List[float] = []
        for epoch in range(epochs):
            epoch_loss = 0.0
            for x, y in dataset:
                opt.zero_grad()
                out = self.predict(x.to(self.device))
                loss = F.mse_loss(out, y.to(self.device))
                loss.backward()
                opt.step()
                epoch_loss += loss.item()
            epoch_loss /= len(dataset)
            losses.append(epoch_loss)
            if verbose:
                print(f"Epoch {epoch+1}/{epochs} loss: {epoch_loss:.6f}")
        return losses

    @staticmethod
    def fidelity(a: Tensor, b: Tensor) -> float:
        """Return the absolute squared overlap between two vectors."""
        a_norm = a / (torch.norm(a) + 1e-12)
        b_norm = b / (torch.norm(b) + 1e-12)
        return float((a_norm @ b_norm).item() ** 2)

    def fidelity_adjacency(
        self,
        states: Sequence[Tensor],
        threshold: float,
        *,
        secondary: float | None = None,
        secondary_weight: float = 0.5,
    ) -> nx.Graph:
        """Create a weighted graph from state fidelities."""
        graph = nx.Graph()
        graph.add_nodes_from(range(len(states)))
        for (i, a), (j, b) in itertools.combinations(enumerate(states), 2):
            fid = self.fidelity(a, b)
            if fid >= threshold:
                graph.add_edge(i, j, weight=1.0)
            elif secondary is not None and fid >= secondary:
                graph.add_edge(i, j, weight=secondary_weight)
        return graph
