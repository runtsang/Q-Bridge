"""Combined classical implementation of a graph‑based self‑attention network
with a hybrid quantum‑style head.  The module pulls together the
GraphQNN utilities, a simple self‑attention block, and a sigmoid head that
mimics a quantum expectation value.

The public API mirrors the original GraphQNN and QCNet modules,
enabling zero‑copy replacement in downstream experiments."""
from __future__ import annotations

import itertools
from typing import Iterable, Sequence, Tuple, List

import torch
import torch.nn as nn
import torch.nn.functional as F
import networkx as nx
import numpy as np

Tensor = torch.Tensor

# --------------------------------------------------------------------------- #
#  Classical self‑attention helper
# --------------------------------------------------------------------------- #
class ClassicalSelfAttention:
    """Simple dot‑product self‑attention implemented with Torch."""
    def __init__(self, embed_dim: int = 4) -> None:
        self.embed_dim = embed_dim

    def run(
        self,
        rotation_params: np.ndarray,
        entangle_params: np.ndarray,
        inputs: np.ndarray,
    ) -> np.ndarray:
        query = torch.as_tensor(
            inputs @ rotation_params.reshape(self.embed_dim, -1), dtype=torch.float32
        )
        key = torch.as_tensor(
            inputs @ entangle_params.reshape(self.embed_dim, -1), dtype=torch.float32
        )
        value = torch.as_tensor(inputs, dtype=torch.float32)
        scores = torch.softmax(query @ key.T / np.sqrt(self.embed_dim), dim=-1)
        return (scores @ value).numpy()

# --------------------------------------------------------------------------- #
#  Graph utilities borrowed from GraphQNN.py
# --------------------------------------------------------------------------- #
def _random_linear(in_features: int, out_features: int) -> Tensor:
    return torch.randn(out_features, in_features, dtype=torch.float32)

def random_training_data(weight: Tensor, samples: int) -> List[Tuple[Tensor, Tensor]]:
    dataset: List[Tuple[Tensor, Tensor]] = []
    for _ in range(samples):
        features = torch.randn(weight.size(1), dtype=torch.float32)
        target = weight @ features
        dataset.append((features, target))
    return dataset

def random_network(qnn_arch: Sequence[int], samples: int = 100):
    """Create a random weight matrix for each layer and a training set."""
    weights: List[Tensor] = [
        _random_linear(in_f, out_f) for in_f, out_f in zip(qnn_arch[:-1], qnn_arch[1:])
    ]
    target_weight = weights[-1]
    training_data = random_training_data(target_weight, samples)
    return list(qnn_arch), weights, training_data, target_weight

def feedforward(
    qnn_arch: Sequence[int],
    weights: Sequence[Tensor],
    samples: Iterable[Tuple[Tensor, Tensor]],
) -> List[List[Tensor]]:
    """Propagate a batch of samples through the classical network."""
    stored: List[List[Tensor]] = []
    for features, _ in samples:
        activations = [features]
        current = features
        for weight in weights:
            current = torch.tanh(weight @ current)
            activations.append(current)
        stored.append(activations)
    return stored

def state_fidelity(a: Tensor, b: Tensor) -> float:
    """Squared overlap between two vectors."""
    a_norm = a / (torch.norm(a) + 1e-12)
    b_norm = b / (torch.norm(b) + 1e-12)
    return float(torch.dot(a_norm, b_norm).item() ** 2)

def fidelity_adjacency(
    states: Sequence[Tensor],
    threshold: float,
    *,
    secondary: float | None = None,
    secondary_weight: float = 0.5,
) -> nx.Graph:
    """Build a weighted graph from state fidelities."""
    graph = nx.Graph()
    graph.add_nodes_from(range(len(states)))
    for (i, state_i), (j, state_j) in itertools.combinations(enumerate(states), 2):
        fid = state_fidelity(state_i, state_j)
        if fid >= threshold:
            graph.add_edge(i, j, weight=1.0)
        elif secondary is not None and fid >= secondary:
            graph.add_edge(i, j, weight=secondary_weight)
    return graph

# --------------------------------------------------------------------------- #
#  Hybrid graph‑QNN classifier
# --------------------------------------------------------------------------- #
class HybridGraphQNNClassifier(nn.Module):
    """
    A classifier that chains:

    1. A classical self‑attention block producing embeddings.
    2. A lightweight graph‑based feed‑forward network (weights are
       generated by ``random_network``).
    3. A sigmoid‑based hybrid head that emulates a quantum expectation
       value.

    The class exposes the same public API as the original GraphQNN
    and QCNet modules, enabling zero‑copy replacement in downstream
    experiments.
    """
    def __init__(
        self,
        qnn_arch: Sequence[int],
        shift: float = 0.0,
        embed_dim: int = 4,
    ) -> None:
        super().__init__()
        self.qnn_arch = list(qnn_arch)
        _, self.weights, _, _ = random_network(qnn_arch, samples=0)
        self.attention = ClassicalSelfAttention(embed_dim=embed_dim)
        self.head = nn.Linear(self.qnn_arch[-1], 2)
        self.shift = shift

    def forward(self, inputs: torch.Tensor) -> torch.Tensor:
        # 1. Self‑attention
        rotation_params = np.random.randn(self.qnn_arch[0] * self.qnn_arch[0])
        entangle_params = np.random.randn(self.qnn_arch[0])
        attn_out = self.attention.run(rotation_params, entangle_params, inputs.numpy())
        attn_tensor = torch.from_numpy(attn_out).float()

        # 2. Graph‑based feed‑forward
        current = attn_tensor
        for weight in self.weights:
            current = torch.tanh(weight @ current)

        # 3. Hybrid head
        logits = self.head(current)
        probs = torch.sigmoid(logits + self.shift)
        return torch.cat((probs, 1 - probs), dim=-1)

    # Convenience wrappers -------------------------------------------------
    def generate_graph(self, state_threshold: float = 0.8) -> nx.Graph:
        """Return a fidelity graph constructed from the network’s last layer."""
        states = [
            activations[-1]
            for activations in feedforward(self.qnn_arch, self.weights, [])
        ]
        return fidelity_adjacency(states, state_threshold)

# --------------------------------------------------------------------------- #
#  Public API
# --------------------------------------------------------------------------- #
__all__ = [
    "HybridGraphQNNClassifier",
    "ClassicalSelfAttention",
    "random_network",
    "feedforward",
    "fidelity_adjacency",
    "state_fidelity",
]
