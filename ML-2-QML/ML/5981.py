"""
Hybrid classical regression model with residual connections and adaptive dropout.
"""

from __future__ import annotations

import torch
import torch.nn as nn
from torch.utils.data import Dataset
import numpy as np

def generate_superposition_data(num_features: int, samples: int) -> tuple[np.ndarray, np.ndarray]:
    """
    Generate synthetic data that mimics a superposition-based target.
    The data is generated by summing the features to obtain an angle
    and applying a nonâ€‘linear transformation.
    """
    x = np.random.uniform(-1.0, 1.0, size=(samples, num_features)).astype(np.float32)
    angles = x.sum(axis=1)
    y = np.sin(angles) + 0.1 * np.cos(2 * angles)
    return x, y.astype(np.float32)

class RegressionDataset(Dataset):
    """
    Dataset that wraps the synthetic data into a PyTorch Dataset.
    """
    def __init__(self, samples: int, num_features: int):
        self.features, self.labels = generate_superposition_data(num_features, samples)

    def __len__(self) -> int:  # type: ignore[override]
        return len(self.features)

    def __getitem__(self, index: int):  # type: ignore[override]
        return {
            "states": torch.tensor(self.features[index], dtype=torch.float32),
            "target": torch.tensor(self.labels[index], dtype=torch.float32),
        }

class ResidualBlock(nn.Module):
    """
    A residual block with two linear layers and a learnable dropout probability.
    """
    def __init__(self, in_features: int, out_features: int):
        super().__init__()
        self.fc1 = nn.Linear(in_features, out_features)
        self.fc2 = nn.Linear(out_features, out_features)
        # Dropout probability is a learnable parameter initialized to 0.1
        self.dropout_p = nn.Parameter(torch.tensor(0.1))
        self.activation = nn.ReLU()

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        residual = x
        out = self.activation(self.fc1(x))
        out = self.activation(self.fc2(out))
        # Apply dropout with a learnable probability
        out = nn.functional.dropout(out, p=self.dropout_p.item(), training=self.training)
        out = out + residual
        return out

class QModel(nn.Module):
    """
    Classical regression model featuring residual connections and an
    adaptive dropout mechanism. The architecture consists of an input
    projection, a stack of residual blocks and a final linear head.
    """
    def __init__(self, num_features: int, hidden_dim: int = 64, num_blocks: int = 3):
        super().__init__()
        self.input_proj = nn.Linear(num_features, hidden_dim)
        self.blocks = nn.ModuleList([ResidualBlock(hidden_dim, hidden_dim) for _ in range(num_blocks)])
        self.output_head = nn.Linear(hidden_dim, 1)

    def forward(self, state_batch: torch.Tensor) -> torch.Tensor:
        """
        Forward pass that propagates the input through the residual stack
        and projects it to a scalar output.
        """
        x = self.input_proj(state_batch)
        for block in self.blocks:
            x = block(x)
        out = self.output_head(x)
        return out.squeeze(-1)

__all__ = ["QModel", "RegressionDataset", "generate_superposition_data"]
