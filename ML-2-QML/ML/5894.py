"""Hybrid estimator that can evaluate either a PyTorch model or a Qiskit circuit, with optional shot noise and quantum‑enhanced transformer blocks."""

from __future__ import annotations

from collections.abc import Iterable, Sequence
from typing import Callable, List, Optional

import numpy as np
import torch
from torch import nn

ScalarObservable = Callable[[torch.Tensor], torch.Tensor | float]


def _ensure_batch(values: Sequence[float]) -> torch.Tensor:
    """Return a 2‑D batch tensor for a 1‑D list of scalars."""
    tensor = torch.as_tensor(values, dtype=torch.float32)
    if tensor.ndim == 1:
        tensor = tensor.unsqueeze(0)
    return tensor


class _HybridBaseEstimator:
    """Internal base that normalises the API across PyTorch and Qiskit."""

    def __init__(self, model: nn.Module | "QuantumCircuit") -> None:
        self.model = model
        self._is_qiskit = hasattr(model, "_circuit") or hasattr(model, "parameters")

    def evaluate(
        self,
        observables: Iterable[Callable[[torch.Tensor], torch.Tensor | float]] | Iterable["BaseOperator"],
        parameter_sets: Sequence[Sequence[float]],
        *,
        shots: Optional[int] = None,
        seed: Optional[int] = None,
    ) -> List[List[float]]:
        """Evaluate all observables for each parameter set.

        Parameters
        ----------
        shots : Optional[int]
            When provided, a noisy estimate is generated by sampling shots
            from the simulator; otherwise the deterministic value is returned.
        """
        if self._is_qiskit:
            return self._evaluate_qiskit(shots, seed, observables, parameter_sets)
        else:
            return self._evaluate_pytorch(shots, seed, observables, parameter_sets)

    def _evaluate_pytorch(
        self,
        shots: Optional[int],
        seed: Optional[int],
        observables: Iterable[Callable[[torch.Tensor], torch.Tensor | float]],
        parameter_sets: Sequence[Sequence[float]],
    ) -> List[List[float]]:
        observables = list(observables) or [lambda outputs: outputs.mean(dim=-1)]
        results: List[List[float]] = []
        self.model.eval()
        with torch.no_grad():
            for params in parameter_sets:
                inputs = _ensure_batch(params)
                outputs = self.model(inputs)
                row: List[float] = []
                for obs in observables:
                    val = obs(outputs)
                    if isinstance(val, torch.Tensor):
                        scalar = float(val.mean().cpu())
                    else:
                        scalar = float(val)
                    row.append(scalar)
                results.append(row)
        return results

    def _evaluate_qiskit(
        self,
        shots: Optional[int],
        seed: Optional[int],
        observables: Iterable["BaseOperator"],
        parameter_sets: Sequence[Sequence[float]],
    ) -> List[List[float]]:
        from qiskit import transpile
        from qiskit.quantum_info import Statevector
        from qiskit.quantum_info.operators import BaseOperator

        circuit = self.model
        if not hasattr(circuit, "parameters"):
            raise TypeError("Expected a Qiskit QuantumCircuit with parameters.")
        if shots is None:
            # deterministic simulation
            results: List[List[float]] = []
            for values in parameter_sets:
                bound = circuit.assign_parameters(
                    dict(zip(circuit.parameters, values))
                )
                state = Statevector.from_instruction(bound)
                row = [float(state.expectation_value(obs)) for obs in observables]
                results.append(row)
            return results

        # 1‑shot simulation with random noise
        rng = np.random.default_rng(seed)
        noisy = []
        for values in parameter_sets:
            bound = circuit.assign_parameters(dict(zip(circuit.parameters, values)))
            bound = transpile(bound, optimization_level=0)
            # sample shots from the statevector to simulate shot noise
            state = Statevector.from_instruction(bound)
            raw = [float(state.expectation_value(obs)) for obs in observables]
            noise = rng.normal(loc=raw, scale=1 / shots)
            noisy.append(noise.tolist())
        return noisy


class FastHybridEstimator(_HybridBaseEstimator):
    """Estimates using a PyTorch model or a Qiskit circuit, with optional Gaussian shot noise."""

    def __init__(self, model: nn.Module | "QuantumCircuit") -> None:
        super().__init__(model)

    def evaluate(
        self,
        observables: Iterable[Callable[[torch.Tensor], torch.Tensor | float]] | Iterable["BaseOperator"],
        parameter_sets: Sequence[Sequence[float]],
        *,
        shots: Optional[int] = None,
        seed: Optional[int] = None,
    ) -> List[List[float]]:
        return super().evaluate(observables, parameter_sets, shots=shots, seed=seed)


__all__ = ["FastHybridEstimator"]
