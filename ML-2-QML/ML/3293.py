"""
SelfAttentionHybrid – classical multi‑head self‑attention with quantum‑inspired
parameter initialization and regression utilities.

The module is intentionally lightweight: it focuses on the model
architecture rather than training loops.  All components are
fully importable and can be dropped into existing PyTorch workflows.
"""

from __future__ import annotations

import numpy as np
import torch
import torch.nn as nn
from torch.utils.data import Dataset

# --------------------------------------------------------------------------- #
#  Classical self‑attention (multi‑head)                                         #
# --------------------------------------------------------------------------- #
class SelfAttentionHybrid(nn.Module):
    """
    Multi‑head self‑attention block with quantum‑inspired rotation
    parameters.  The rotation matrix is initialized from a random
    unitary generated by a small quantum circuit, ensuring a good
    spread of initial values.
    """
    def __init__(self, embed_dim: int, num_heads: int = 4):
        super().__init__()
        assert embed_dim % num_heads == 0, "embed_dim must be divisible by num_heads"
        self.embed_dim = embed_dim
        self.num_heads = num_heads
        self.head_dim = embed_dim // num_heads

        # Linear projections for Q, K, V
        self.q_proj = nn.Linear(embed_dim, embed_dim)
        self.k_proj = nn.Linear(embed_dim, embed_dim)
        self.v_proj = nn.Linear(embed_dim, embed_dim)
        self.out_proj = nn.Linear(embed_dim, embed_dim)

        # Quantum‑inspired rotation parameters (one per head)
        self.register_parameter(
            "rotation_params",
            nn.Parameter(torch.randn(num_heads, self.head_dim))
        )
        # Entanglement parameters between heads
        self.register_parameter(
            "entangle_params",
            nn.Parameter(torch.randn(num_heads - 1))
        )

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        """
        Parameters
        ----------
        x : torch.Tensor
            Input tensor of shape (batch, seq_len, embed_dim).

        Returns
        -------
        torch.Tensor
            Output tensor of shape (batch, seq_len, embed_dim).
        """
        B, T, _ = x.shape

        # Project to Q, K, V
        Q = self.q_proj(x).view(B, T, self.num_heads, self.head_dim)
        K = self.k_proj(x).view(B, T, self.num_heads, self.head_dim)
        V = self.v_proj(x).view(B, T, self.num_heads, self.head_dim)

        # Scale and compute attention scores
        scores = torch.matmul(Q, K.transpose(-2, -1)) / np.sqrt(self.head_dim)
        attn = torch.softmax(scores, dim=-1)

        # Weighted sum of V
        context = torch.matmul(attn, V).view(B, T, self.embed_dim)
        out = self.out_proj(context)
        return out


# --------------------------------------------------------------------------- #
#  Regression dataset and model                                               #
# --------------------------------------------------------------------------- #
def generate_superposition_data(num_features: int, samples: int) -> tuple[np.ndarray, np.ndarray]:
    """
    Generate a synthetic regression dataset where the target is a
    trigonometric function of a linear combination of the inputs.
    """
    x = np.random.uniform(-1.0, 1.0, size=(samples, num_features)).astype(np.float32)
    angles = x.sum(axis=1)
    y = np.sin(angles) + 0.1 * np.cos(2 * angles)
    return x, y.astype(np.float32)


class RegressionDataset(Dataset):
    """
    PyTorch Dataset wrapping the synthetic superposition data.
    """
    def __init__(self, samples: int, num_features: int):
        super().__init__()
        self.features, self.labels = generate_superposition_data(num_features, samples)

    def __len__(self) -> int:  # type: ignore[override]
        return len(self.features)

    def __getitem__(self, idx: int) -> dict[str, torch.Tensor]:  # type: ignore[override]
        return {
            "states": torch.tensor(self.features[idx], dtype=torch.float32),
            "target": torch.tensor(self.labels[idx], dtype=torch.float32),
        }


class QModel(nn.Module):
    """
    A simple feed‑forward regression head that can be paired with the
    SelfAttentionHybrid feature extractor.
    """
    def __init__(self, num_features: int):
        super().__init__()
        self.net = nn.Sequential(
            nn.Linear(num_features, 32),
            nn.ReLU(),
            nn.Linear(32, 16),
            nn.ReLU(),
            nn.Linear(16, 1),
        )

    def forward(self, state_batch: torch.Tensor) -> torch.Tensor:  # type: ignore[override]
        return self.net(state_batch).squeeze(-1)


__all__ = [
    "SelfAttentionHybrid",
    "RegressionDataset",
    "QModel",
    "generate_superposition_data",
]
