"""Hybrid Graph Neural Network with classical feature extraction and optional stochastic regulariser.

The module keeps the original feed‑forward and fidelity utilities but adds a new
``GraphQNNGen125`` class that:
* builds a classical graph neural network with PyTorch Geometric layers,
* optionally randomises the graph topology during training,
* trains a linear mapping between node embeddings and target outputs.
"""

from __future__ import annotations

import itertools
import random
from collections.abc import Iterable, Sequence
from typing import List, Tuple

import networkx as nx
import torch
import torch.nn.functional as F
from torch import nn
from torch_geometric.nn import GCNConv

Tensor = torch.Tensor

def _random_linear(in_features: int, out_features: int) -> Tensor:
    """Return a weight matrix with std = 1/√in_features."""
    return torch.randn(out_features, in_features, dtype=torch.float32) / (in_features**0.5)

def random_training_data(weight: Tensor, samples: int) -> List[Tuple[Tensor, Tensor]]:
    dataset: List[Tuple[Tensor, Tensor]] = []
    for _ in range(samples):
        features = torch.randn(weight.size(1), dtype=torch.float32)
        target = weight @ features
        dataset.append((features, target))
    return dataset

def random_network(qnn_arch: Sequence[int], samples: int):
    weights: List[Tensor] = []
    for in_f, out_f in zip(qnn_arch[:-1], qnn_arch[1:]):
        weights.append(_random_linear(in_f, out_f))
    target_weight = weights[-1]
    training_data = random_training_data(target_weight, samples)
    return list(qnn_arch), weights, training_data, target_weight

def feedforward(
    qnn_arch: Sequence[int],
    weights: Sequence[Tensor],
    samples: Iterable[Tuple[Tensor, Tensor]],
) -> List[List[Tensor]]:
    stored: List[List[Tensor]] = []
    for features, _ in samples:
        activations = [features]
        current = features
        for weight in weights:
            current = torch.tanh(weight @ current)
            activations.append(current)
        stored.append(activations)
    return stored

def state_fidelity(a: Tensor, b: Tensor) -> float:
    a_norm = a / (torch.norm(a) + 1e-12)
    b_norm = b / (torch.norm(b) + 1e-12)
    return float(torch.dot(a_norm, b_norm).item() ** 2)

def fidelity_adjacency(
    states: Sequence[Tensor], threshold: float, *, secondary: float | None = None, secondary_weight: float = 0.5
) -> nx.Graph:
    graph = nx.Graph()
    graph.add_nodes_from(range(len(states)))
    for (i, state_i), (j, state_j) in itertools.combinations(enumerate(states), 2):
        fid = state_fidelity(state_i, state_j)
        if fid >= threshold:
            graph.add_edge(i, j, weight=1.0)
        elif secondary is not None and fid >= secondary:
            graph.add_edge(i, j, weight=secondary_weight)
    return graph

def stochastic_regulariser(graph: nx.Graph, p: float) -> nx.Graph:
    """Return a new graph with each edge removed with probability p."""
    new_graph = graph.copy()
    for u, v in list(new_graph.edges()):
        if random.random() < p:
            new_graph.remove_edge(u, v)
    return new_graph

class GraphQNNGen125(nn.Module):
    """Hybrid classical GNN that learns a linear transformation on node features.

    The forward pass consists of a sequence of GCN layers followed by a
    linear output layer that predicts the target weight matrix.  The model
    is trained on synthetic data generated by ``random_network``.
    """
    def __init__(self, graph: nx.Graph, qnn_arch: List[int], device: torch.device = torch.device("cpu")):
        super().__init__()
        self.graph = graph
        self.qnn_arch = qnn_arch
        self.device = device
        # Build GCN layers
        self.convs = nn.ModuleList()
        in_dim = 1  # assume 1‑D node features
        for out_dim in qnn_arch[:-1]:
            self.convs.append(GCNConv(in_dim, out_dim))
            in_dim = out_dim
        # Final linear layer
        self.out = nn.Linear(in_dim, qnn_arch[-1])

    def forward(self, x: Tensor, edge_index: torch.Tensor) -> Tensor:
        for conv in self.convs:
            x = F.relu(conv(x, edge_index))
        return self.out(x)
