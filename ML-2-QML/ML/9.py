"""GraphQNN__gen007: Classical MLP with skip‑connection and training utilities.

The module extends the original seed by adding:
* A `GraphQNN` class that implements a torch `nn.Module` with skip connections
  and a ReLU activation.
* `fit` and `predict` methods that train on synthetic data generated by
  random weights and the `random_network` helper.
* The output of `fit` returns a *graph* of *fidelity* between layer activations.
"""

import torch
from torch import nn, optim
import networkx as nx
import itertools
from typing import List, Tuple, Sequence


Tensor = torch.Tensor


def _random_linear(in_features: int, out_features: int) -> Tensor:
    return torch.randn(out_features, in_features, dtype=torch.float32)


def random_training_data(weight: Tensor, samples: int) -> List[Tuple[Tensor, Tensor]]:
    """Generate synthetic (input, target) pairs from a fixed linear map."""
    dataset: List[Tuple[Tensor, Tensor]] = []
    for _ in range(samples):
        features = torch.randn(weight.size(1), dtype=torch.float32)
        target = weight @ features
        dataset.append((features, target))
    return dataset


def random_network(qnn_arch: Sequence[int], samples: int):
    """Return architecture, list of weight matrices, synthetic training data,
    and the target weight used for data generation."""
    weights: List[Tensor] = []
    for in_f, out_f in zip(qnn_arch[:-1], qnn_arch[1:]):
        weights.append(_random_linear(in_f, out_f))
    target_weight = weights[-1]
    training_data = random_training_data(target_weight, samples)
    return list(qnn_arch), weights, training_data, target_weight


def feedforward(
    qnn_arch: Sequence[int],
    weights: Sequence[Tensor],
    samples: Iterable[Tuple[Tensor, Tensor]],
) -> List[List[Tensor]]:
    """Return activations for each sample, including skip connections."""
    stored: List[List[Tensor]] = []
    for features, _ in samples:
        activations = [features]
        current = features
        for weight in weights:
            current = torch.tanh(weight @ current + activations[-1])  # skip
            activations.append(current)
        stored.append(activations)
    return stored


def state_fidelity(a: Tensor, b: Tensor) -> float:
    """Overlap of two activation vectors (normalized)."""
    a_norm = a / (torch.norm(a) + 1e-12)
    b_norm = b / (torch.norm(b) + 1e-12)
    return float(torch.dot(a_norm, b_norm).item() ** 2)


def fidelity_adjacency(
    states: Sequence[Tensor],
    threshold: float,
    *,
    secondary: float | None = None,
    secondary_weight: float = 0.5,
) -> nx.Graph:
    """Create a weighted graph from state fidelities."""
    graph = nx.Graph()
    graph.add_nodes_from(range(len(states)))
    for (i, state_i), (j, state_j) in itertools.combinations(enumerate(states), 2):
        fid = state_fidelity(state_i, state_j)
        if fid >= threshold:
            graph.add_edge(i, j, weight=1.0)
        elif secondary is not None and fid >= secondary:
            graph.add_edge(i, j, weight=secondary_weight)
    return graph


class GraphQNN(nn.Module):
    """MLP with optional skip‑connections and a `fit` routine."""

    def __init__(self, arch: Sequence[int], skip: bool = True):
        super().__init__()
        self.arch = list(arch)
        self.skip = skip
        self.layers = nn.ModuleList(
            [nn.Linear(in_f, out_f) for in_f, out_f in zip(arch[:-1], arch[1:])]
        )
        self.activation = nn.Tanh()

    def forward(self, x: Tensor) -> Tensor:
        activ = x
        for layer in self.layers:
            out = self.activation(layer(activ))
            if self.skip:
                activ = activ + out
            else:
                activ = out
        return activ

    def fit(
        self,
        samples: int = 200,
        epochs: int = 200,
        lr: float = 1e-3,
        fidelity_thresh: float = 0.95,
    ) -> nx.Graph:
        """Train on synthetic data and return a fidelity graph of hidden states."""
        arch, weights, train_data, _ = random_network(self.arch, samples)
        # Replace weights with model parameters
        for w, layer in zip(weights, self.layers):
            layer.weight.data = w.clone().t()
            layer.bias.data.zero_()

        optimizer = optim.Adam(self.parameters(), lr=lr)
        loss_fn = nn.MSELoss()

        for _ in range(epochs):
            for inp, tgt in train_data:
                out = self(inp)
                loss = loss_fn(out, tgt)
                optimizer.zero_grad()
                loss.backward()
                optimizer.step()

        # Gather activations for fidelity graph
        activations = feedforward(self.arch, weights, train_data)
        # Use last hidden layer (penultimate)
        hidden_states = [act[-2] for act in activations]
        return fidelity_adjacency(hidden_states, fidelity_thresh)

    def predict(self, x: Tensor) -> Tensor:
        return self.forward(x)
