"""RealAmplitudesCZSymmetry – a symmetry‑controlled variant of RealAmplitudesCZ.

This module defines a parameterised ansatz that optionally enforces a global
parameter symmetry across all rotation layers.  When ``enforce_symmetry`` is
``True`` the circuit re‑uses the same ``ParameterVector`` for every rotation
layer, ensuring that the ansatz is invariant under a global rotation of all
qubits.  This controlled modification keeps the original CZ‑entangling
structure but introduces a useful symmetry constraint for certain
variational optimisation tasks.

The public API mirrors the original ``real_amplitudes_cz`` function:
``real_amplitudes_cz_symmetry`` builds a ``QuantumCircuit`` and
``RealAmplitudesCZSymmetry`` is a subclass that can be instantiated directly.
"""

from __future__ import annotations

from typing import Callable, List, Sequence, Tuple

from qiskit import QuantumCircuit
from qiskit.circuit import ParameterVector


def _resolve_entanglement(
    num_qubits: int,
    entanglement: str | Sequence[Tuple[int, int]] | Callable[[int], Sequence[Tuple[int, int]]],
) -> List[Tuple[int, int]]:
    """Return a list of two‑qubit pairs according to a simple entanglement spec."""
    if isinstance(entanglement, str):
        if entanglement == "full":
            return [(i, j) for i in range(num_qubits) for j in range(i + 1, num_qubits)]
        if entanglement == "linear":
            return [(i, i + 1) for i in range(num_qubits - 1)]
        if entanglement == "circular":
            pairs = [(i, i + 1) for i in range(num_qubits - 1)]
            if num_qubits > 2:
                pairs.append((num_qubits - 1, 0))
            return pairs
        raise ValueError(f"Unknown entanglement string: {entanglement!r}")

    if callable(entanglement):
        pairs = list(entanglement(num_qubits))
        return [(int(i), int(j)) for (i, j) in pairs]

    pairs = [(int(i), int(j)) for (i, j) in entanglement]  # type: ignore[arg-type]
    for (i, j) in pairs:
        if i == j:
            raise ValueError("Entanglement pairs must connect distinct qubits.")
        if not (0 <= i < num_qubits and 0 <= j < num_qubits):
            raise ValueError(f"Entanglement pair {(i, j)} out of range for n={num_qubits}.")
    return pairs


def real_amplitudes_cz_symmetry(
    num_qubits: int,
    reps: int = 1,
    entanglement: str | Sequence[Tuple[int, int]] | Callable[[int], Sequence[Tuple[int, int]]] = "full",
    skip_final_rotation_layer: bool = False,
    insert_barriers: bool = False,
    parameter_prefix: str = "theta",
    enforce_symmetry: bool = False,
    name: str | None = None,
) -> QuantumCircuit:
    """Build a CZ‑entangling Real‑Amplitudes circuit with optional symmetry.

    Parameters
    ----------
    num_qubits : int
        Number of qubits in the circuit.
    reps : int, default 1
        Number of repetition blocks.
    entanglement : str | sequence | callable, default "full"
        Entanglement topology.  See :func:`_resolve_entanglement`.
    skip_final_rotation_layer : bool, default False
        If ``True`` the last rotation layer is omitted.
    insert_barriers : bool, default False
        Insert barriers between logical layers for visual clarity.
    parameter_prefix : str, default "theta"
        Prefix for autogenerated parameters.
    enforce_symmetry : bool, default False
        When ``True`` all rotation layers share a single ``ParameterVector``.
    name : str | None, default None
        Base name for the circuit.  If ``None`` a default name is used.

    Returns
    -------
    QuantumCircuit
        The constructed ansatz circuit.
    """
    if num_qubits < 1:
        raise ValueError("num_qubits must be >= 1.")

    n = int(num_qubits)
    circuit_name = name or "RealAmplitudesCZSymmetry"
    qc = QuantumCircuit(n, name=circuit_name)

    # Determine the number of rotation layers
    num_rot_layers = reps if skip_final_rotation_layer else reps + 1

    # Create parameter vector(s)
    if enforce_symmetry:
        # Single shared parameter vector
        params = ParameterVector(parameter_prefix, n)
    else:
        # Separate parameters per rotation layer
        params = ParameterVector(parameter_prefix, num_rot_layers * n)

    def _rotation_layer(layer: int) -> None:
        """Apply an RY rotation on each qubit."""
        base = layer * n if not enforce_symmetry else 0
        for q in range(n):
            idx = base + q if not enforce_symmetry else q
            qc.ry(params[idx], q)

    pairs = _resolve_entanglement(n, entanglement)

    for r in range(reps):
        _rotation_layer(r)
        if insert_barriers:
            qc.barrier()
        for i, j in pairs:
            qc.cz(i, j)
        if insert_barriers:
            qc.barrier()

    if not skip_final_rotation_layer:
        _rotation_layer(reps)

    # Attach metadata for downstream tooling
    qc.input_params = params  # type: ignore[attr-defined]
    qc.num_rot_layers = num_rot_layers  # type: ignore[attr-defined]
    qc.enforce_symmetry = enforce_symmetry  # type: ignore[attr-defined]
    return qc


class RealAmplitudesCZSymmetry(QuantumCircuit):
    """Convenient subclass that builds a symmetry‑controlled Real‑Amplitudes CZ ansatz.

    Parameters
    ----------
    num_qubits : int
        Number of qubits in the circuit.
    reps : int, default 1
        Number of repetition blocks.
    entanglement : str | sequence | callable, default "full"
        Entanglement topology.  See :func:`_resolve_entanglement`.
    skip_final_rotation_layer : bool, default False
        If ``True`` the last rotation layer is omitted.
    insert_barriers : bool, default False
        Insert barriers between logical layers.
    parameter_prefix : str, default "theta"
        Prefix for autogenerated parameters.
    enforce_symmetry : bool, default False
        When ``True`` all rotation layers share a single ``ParameterVector``.
    name : str, default "RealAmplitudesCZSymmetry"
        Base name for the circuit.

    Notes
    -----
    The class simply delegates construction to :func:`real_amplitudes_cz_symmetry`
    and then composes the resulting circuit into itself.  This allows
    ``QuantumCircuit`` methods (e.g., ``compose``, ``bind_parameters``) to be
    used seamlessly.
    """
    def __init__(
        self,
        num_qubits: int,
        reps: int = 1,
        entanglement: str | Sequence[Tuple[int, int]] | Callable[[int], Sequence[Tuple[int, int]]] = "full",
        skip_final_rotation_layer: bool = False,
        insert_barriers: bool = False,
        parameter_prefix: str = "theta",
        enforce_symmetry: bool = False,
        name: str = "RealAmplitudesCZSymmetry",
    ) -> None:
        built = real_amplitudes_cz_symmetry(
            num_qubits,
            reps,
            entanglement,
            skip_final_rotation_layer,
            insert_barriers,
            parameter_prefix,
            enforce_symmetry,
            name,
        )
        super().__init__(built.num_qubits, name=name)
        self.compose(built, inplace=True)
        self.input_params = built.input_params  # type: ignore[attr-defined]
        self.num_rot_layers = built.num_rot_layers  # type: ignore[attr-defined]
        self.enforce_symmetry = built.enforce_symmetry  # type: ignore[attr-defined]


__all__ = ["RealAmplitudesCZSymmetry", "real_amplitudes_cz_symmetry"]
