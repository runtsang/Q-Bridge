"""ControlledRealAmplitudesAlternating: a symmetry‑constrained variant of RealAmplitudesAlternating."""
from __future__ import annotations

from typing import Callable, List, Sequence, Tuple

from qiskit import QuantumCircuit
from qiskit.circuit import ParameterVector

__all__ = [
    "ControlledRealAmplitudesAlternating",
    "controlled_real_amplitudes_alternating",
]


def _resolve_entanglement(
    num_qubits: int,
    entanglement: str | Sequence[Tuple[int, int]] | Callable[[int], Sequence[Tuple[int, int]]],
) -> List[Tuple[int, int]]:
    """
    Resolve an entanglement specification into a list of two‑qubit pairs.

    Parameters
    ----------
    num_qubits : int
        Number of qubits in the circuit.
    entanglement : str | Sequence[Tuple[int, int]] | Callable[[int], Sequence[Tuple[int, int]]]
        Entanglement specification. Supported strings are ``"full"``, ``"linear"``, and ``"circular"``.
        A sequence of tuples or a callable returning such a sequence is also accepted.

    Returns
    -------
    List[Tuple[int, int]]
        List of two‑qubit entanglement pairs.

    Raises
    ------
    ValueError
        If an unknown string is supplied or if a pair contains identical qubits or out‑of‑range indices.
    """
    if isinstance(entanglement, str):
        if entanglement == "full":
            return [(i, j) for i in range(num_qubits) for j in range(i + 1, num_qubits)]
        if entanglement == "linear":
            return [(i, i + 1) for i in range(num_qubits - 1)]
        if entanglement == "circular":
            pairs = [(i, i + 1) for i in range(num_qubits - 1)]
            if num_qubits > 2:
                pairs.append((num_qubits - 1, 0))
            return pairs
        raise ValueError(f"Unknown entanglement string: {entanglement!r}")

    if callable(entanglement):
        pairs = list(entanglement(num_qubits))
        return [(int(i), int(j)) for (i, j) in pairs]

    pairs = [(int(i), int(j)) for (i, j) in entanglement]  # type: ignore[arg-type]
    for (i, j) in pairs:
        if i == j:
            raise ValueError("Entanglement pairs must connect distinct qubits.")
        if not (0 <= i < num_qubits and 0 <= j < num_qubits):
            raise ValueError(f"Entanglement pair {(i, j)} out of range for n={num_qubits}.")
    return pairs


def controlled_real_amplitudes_alternating(
    num_qubits: int,
    reps: int = 1,
    entanglement: str | Sequence[Tuple[int, int]] | Callable[[int], Sequence[Tuple[int, int]]] = "full",
    skip_final_rotation_layer: bool = False,
    insert_barriers: bool = False,
    parameter_prefix: str = "theta",
    symmetry: str = "none",
    name: str | None = None,
) -> QuantumCircuit:
    """
    Construct a symmetry‑constrained alternating‑rotation ansatz.

    This ansatz extends the standard RealAmplitudesAlternating by allowing a user‑defined
    symmetry constraint over rotation parameters. The alternating pattern of RY/RX
    rotations is preserved, but parameters may be shared across layers according
    to the ``symmetry`` keyword.

    Parameters
    ----------
    num_qubits : int
        Number of qubits in the circuit.
    reps : int, default 1
        Number of entanglement layers. The circuit will contain ``reps`` entanglement
        blocks followed by an optional final rotation layer.
    entanglement : str | Sequence[Tuple[int, int]] | Callable[[int], Sequence[Tuple[int, int]]], default "full"
        Entanglement pattern to apply after each rotation layer.
    skip_final_rotation_layer : bool, default False
        If True, the final rotation layer after the last entanglement block is omitted.
    insert_barriers : bool, default False
        If True, insert barriers between functional blocks for clearer visualisation.
    parameter_prefix : str, default "theta"
        Prefix for the autogenerated parameter names.
    symmetry : str, default "none"
        Symmetry constraint for parameter sharing. Supported values are:
        - ``"none"``   : each layer has its own independent parameters.
        - ``"even"``   : all even‑indexed layers share the same parameters.
        - ``"odd"``    : all odd‑indexed layers share the same parameters.
        - ``"full"``   : all layers share a single set of parameters.
    name : str, optional
        Circuit name. Defaults to ``"ControlledRealAmplitudesAlternating"``.

    Returns
    -------
    QuantumCircuit
        The constructed ansatz circuit.

    Raises
    ------
    ValueError
        If an invalid ``symmetry`` value is provided or if ``num_qubits`` is less than 1.
    """
    if num_qubits < 1:
        raise ValueError("num_qubits must be >= 1.")
    if symmetry not in {"none", "even", "odd", "full"}:
        raise ValueError(
            f"Unsupported symmetry option {symmetry!r}. "
            "Supported options: 'none', 'even', 'odd', 'full'."
        )

    n = int(num_qubits)
    qc = QuantumCircuit(n, name=name or "ControlledRealAmplitudesAlternating")

    # Determine the number of rotation layers.
    num_rot_layers = reps if skip_final_rotation_layer else reps + 1

    # Build parameter vectors according to the symmetry policy.
    param_vectors: List[ParameterVector] = []
    if symmetry == "full":
        full_params = ParameterVector(f"{parameter_prefix}_full", n)
        param_vectors = [full_params] * num_rot_layers
    elif symmetry in {"even", "odd"}:
        even_params = ParameterVector(f"{parameter_prefix}_even", n)
        odd_params = ParameterVector(f"{parameter_prefix}_odd", n)
        param_vectors = [
            even_params if layer % 2 == 0 else odd_params for layer in range(num_rot_layers)
        ]
    else:  # symmetry == "none"
        param_vectors = [
            ParameterVector(f"{parameter_prefix}_layer{layer}", n)
            for layer in range(num_rot_layers)
        ]

    def _rot(layer: int) -> None:
        """Apply the alternating rotation layer for the given layer index."""
        params = param_vectors[layer]
        if layer % 2 == 0:
            for q in range(n):
                qc.ry(params[q], q)
        else:
            for q in range(n):
                qc.rx(params[q], q)

    pairs = _resolve_entanglement(n, entanglement)

    for r in range(reps):
        _rot(r)
        if insert_barriers:
            qc.barrier()
        for (i, j) in pairs:
            qc.cx(i, j)
        if insert_barriers:
            qc.barrier()

    if not skip_final_rotation_layer:
        _rot(reps)

    qc.input_params = param_vectors  # type: ignore[attr-defined]
    qc.num_rot_layers = num_rot_layers  # type: ignore[attr-defined]
    return qc


class ControlledRealAmplitudesAlternating(QuantumCircuit):
    """
    Convenience subclass for the symmetry‑constrained alternating‑rotation ansatz.

    Parameters
    ----------
    num_qubits : int
        Number of qubits.
    reps : int, default 1
        Number of entanglement layers.
    entanglement : str | Sequence[Tuple[int, int]] | Callable[[int], Sequence[Tuple[int, int]]], default "full"
        Entanglement pattern.
    skip_final_rotation_layer : bool, default False
        Skip the final rotation layer if True.
    insert_barriers : bool, default False
        Insert barriers between functional blocks.
    parameter_prefix : str, default "theta"
        Prefix for parameter names.
    symmetry : str, default "none"
        Symmetry constraint for parameter sharing.
    name : str, default "ControlledRealAmplitudesAlternating"
        Circuit name.

    Notes
    -----
    The class simply forwards to :func:`controlled_real_amplitudes_alternating` and
    exposes the resulting circuit as a :class:`~qiskit.circuit.QuantumCircuit`.
    """

    def __init__(
        self,
        num_qubits: int,
        reps: int = 1,
        entanglement: str | Sequence[Tuple[int, int]] | Callable[[int], Sequence[Tuple[int, int]]] = "full",
        skip_final_rotation_layer: bool = False,
        insert_barriers: bool = False,
        parameter_prefix: str = "theta",
        symmetry: str = "none",
        name: str = "ControlledRealAmplitudesAlternating",
    ) -> None:
        built = controlled_real_amplitudes_alternating(
            num_qubits,
            reps,
            entanglement,
            skip_final_rotation_layer,
            insert_barriers,
            parameter_prefix,
            symmetry,
            name,
        )
        super().__init__(built.num_qubits, name=name)
        self.compose(built, inplace=True)
        self.input_params = built.input_params  # type: ignore[attr-defined]
        self.num_rot_layers = built.num_rot_layers  # type: ignore[attr-defined]
