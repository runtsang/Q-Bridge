"""Hybrid quantum-classical kernel model using TorchQuantum.

This quantum module implements the same hybrid kernel as the classical counterpart,
but performs the quantum kernel evaluation on a real quantum device (or simulator).
It also includes a quantum fully‑connected block inspired by Quantum‑NAT.
"""

from __future__ import annotations

import torch
import torch.nn as nn
import torchquantum as tq
import torchquantum.functional as tqf
from torchquantum.functional import func_name_dict
from typing import Tuple


class HybridQuantumKernelModel(tq.QuantumModule):
    """
    Hybrid kernel that blends a classical RBF kernel on raw data with a quantum kernel
    generated by a small variational circuit. The quantum circuit
    is built from the Quantum‑NAT QLayer as a feature extractor.
    """

    class QLayer(tq.QuantumModule):
        """
        Quantum fully‑connected block from Quantum‑NAT.
        """
        def __init__(self, n_wires: int = 4):
            super().__init__()
            self.n_wires = n_wires
            self.random_layer = tq.RandomLayer(n_ops=50, wires=list(range(self.n_wires)))
            self.rx0 = tq.RX(has_params=True, trainable=True)
            self.ry0 = tq.RY(has_params=True, trainable=True)
            self.rz0 = tq.RZ(has_params=True, trainable=True)
            self.crx0 = tq.CRX(has_params=True, trainable=True)

        @tq.static_support
        def forward(self, qdev: tq.QuantumDevice) -> None:
            self.random_layer(qdev)
            self.rx0(qdev, wires=0)
            self.ry0(qdev, wires=1)
            self.rz0(qdev, wires=3)
            self.crx0(qdev, wires=[0, 2])
            tqf.hadamard(qdev, wires=3, static=self.static_mode, parent_graph=self.graph)
            tqf.sx(qdev, wires=2, static=self.static_mode, parent_graph=self.graph)
            tqf.cnot(qdev, wires=[3, 0], static=self.static_mode, parent_graph=self.graph)

    def __init__(self,
                 n_wires: int = 4,
                 gamma: float = 1.0,
                 weight_raw: float = 0.5,
                 weight_q: float = 0.5) -> None:
        super().__init__()
        self.n_wires = n_wires
        self.gamma = gamma
        self.weight_raw = weight_raw
        self.weight_q = weight_q

        # Classical RBF kernel lambda
        self.rbf = lambda a, b: torch.exp(-self.gamma * torch.sum((a - b)**2, dim=-1, keepdim=True))

        # Quantum encoder and QLayer
        self.encoder = tq.GeneralEncoder(tq.encoder_op_list_name_dict["4x4_ryzxy"])
        self.q_layer = self.QLayer(self.n_wires)
        self.measure = tq.MeasureAll(tq.PauliZ)

    def _quantum_kernel(self, x: torch.Tensor, y: torch.Tensor) -> torch.Tensor:
        """
        Compute the quantum kernel by evaluating the overlap of two encoded
        quantum states produced by the encoder+QLayer.
        """
        # Prepare devices
        qdev_x = tq.QuantumDevice(n_wires=self.n_wires, bsz=x.shape[0], device=x.device, record_op=True)
        qdev_y = tq.QuantumDevice(n_wires=self.n_wires, bsz=y.shape[0], device=y.device, record_op=True)

        # Encode and apply QLayer for x
        self.encoder(qdev_x, x)
        self.q_layer(qdev_x)
        out_x = self.measure(qdev_x)   # (batch_x, n_wires)

        # Encode and apply QLayer for y
        self.encoder(qdev_y, y)
        self.q_layer(qdev_y)
        out_y = self.measure(qdev_y)   # (batch_y, n_wires)

        # Overlap: product over wires of cos((theta_i - phi_i)/2)
        diff = out_x.unsqueeze(1) - out_y.unsqueeze(0)  # (m,n,n_wires)
        cos_term = torch.cos(diff / 2.0)
        return torch.prod(cos_term, dim=-1, keepdim=True)

    def _rbf_kernel(self, x: torch.Tensor, y: torch.Tensor) -> torch.Tensor:
        """
        Classical RBF kernel on raw images.
        """
        x_flat = x.view(x.shape[0], -1)
        y_flat = y.view(y.shape[0], -1)
        diff = x_flat.unsqueeze(1) - y_flat.unsqueeze(0)
        return torch.exp(-self.gamma * torch.sum(diff * diff, dim=-1, keepdim=True))

    def forward(self,
                x: torch.Tensor,
                y: torch.Tensor) -> torch.Tensor:
        """
        Hybrid kernel matrix between two batches of images.
        """
        raw_k = self._rbf_kernel(x, y)
        q_k = self._quantum_kernel(x, y)
        return self.weight_raw * raw_k + self.weight_q * q_k

    def kernel_matrix(self,
                      a: Tuple[torch.Tensor,...],
                      b: Tuple[torch.Tensor,...]) -> torch.Tensor:
        """
        Convenience wrapper to produce the kernel matrix for sequences of tensors.
        """
        mats = []
        for ai in a:
            row = []
            for bj in b:
                row.append(self.forward(ai, bj))
            mats.append(torch.cat(row, dim=1))
        return torch.cat(mats, dim=0)
