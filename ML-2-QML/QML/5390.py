"""Quantum‑enhanced hybrid model combining quanvolution, transformer, and kernel modules."""

from __future__ import annotations

import numpy as np
from typing import Sequence

import torch
import torch.nn as nn
import torch.nn.functional as F
import torchquantum as tq
import torchquantum.functional as tqf


class QuantumQuanvolutionFilter(tq.QuantumModule):
    """Parameter‑encoded quanvolution filter using a random circuit."""
    def __init__(self, n_wires: int = 4) -> None:
        super().__init__()
        self.n_wires = n_wires
        self.encoder = tq.GeneralEncoder(
            [
                {"input_idx": [0], "func": "ry", "wires": [0]},
                {"input_idx": [1], "func": "ry", "wires": [1]},
                {"input_idx": [2], "func": "ry", "wires": [2]},
                {"input_idx": [3], "func": "ry", "wires": [3]},
            ]
        )
        self.layer = tq.RandomLayer(n_ops=8, wires=list(range(self.n_wires)))
        self.measure = tq.MeasureAll(tq.PauliZ)

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        bsz = x.shape[0]
        device = x.device
        qdev = tq.QuantumDevice(self.n_wires, bsz=bsz, device=device)
        x = x.view(bsz, 28, 28)
        patches = []
        for r in range(0, 28, 2):
            for c in range(0, 28, 2):
                data = torch.stack(
                    [
                        x[:, r, c],
                        x[:, r, c + 1],
                        x[:, r + 1, c],
                        x[:, r + 1, c + 1],
                    ],
                    dim=1,
                )
                self.encoder(qdev, data)
                self.layer(qdev)
                measurement = self.measure(qdev)
                patches.append(measurement.view(bsz, 4))
        return torch.cat(patches, dim=1)


class QuantumTransformerBlock(tq.QuantumModule):
    """Transformer block where attention projections are generated by a quantum circuit."""
    def __init__(
        self,
        embed_dim: int,
        num_heads: int,
        ffn_dim: int,
        n_wires: int = 8,
        dropout: float = 0.1,
    ) -> None:
        super().__init__()
        self.embed_dim = embed_dim
        self.num_heads = num_heads
        self.d_k = embed_dim // num_heads
        self.dropout = nn.Dropout(dropout)
        self.q_layer = tq.RandomLayer(n_ops=8, wires=list(range(n_wires)))
        self.combine = nn.Linear(embed_dim, embed_dim)
        self.norm1 = nn.LayerNorm(embed_dim)
        self.norm2 = nn.LayerNorm(embed_dim)
        self.ffn = nn.Sequential(
            nn.Linear(embed_dim, ffn_dim),
            nn.ReLU(),
            nn.Dropout(dropout),
            nn.Linear(ffn_dim, embed_dim),
        )

    def _apply_quantum_heads(self, x: torch.Tensor, qdev: tq.QuantumDevice) -> torch.Tensor:
        out = []
        for token in x.unbind(dim=1):
            token = token.view(token.size(0), self.num_heads, -1)
            head_outs = []
            for head in token.unbind(dim=1):
                self.q_layer(qdev, head)
                head_outs.append(tq.MeasureAll(tq.PauliZ)(qdev).view(head.size(0), -1))
            head_outs = torch.stack(head_outs, dim=1)
            out.append(head_outs)
        return torch.stack(out, dim=1)

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        batch, seq_len, _ = x.size()
        qdev = tq.QuantumDevice(n_wires=self.num_heads * 2, bsz=batch, device=x.device)
        q_out = self._apply_quantum_heads(x, qdev)
        attn_out = self.combine(q_out)
        x = self.norm1(x + self.dropout(attn_out))
        ffn_out = self.ffn(x)
        return self.norm2(x + self.dropout(ffn_out))


class QuantumKernel(tq.QuantumModule):
    """Quantum kernel based on a parameter‑encoded circuit."""
    def __init__(self, n_wires: int = 4) -> None:
        super().__init__()
        self.n_wires = n_wires
        self.q_device = tq.QuantumDevice(n_wires=self.n_wires)
        self.ansatz = tq.GeneralEncoder(
            [
                {"input_idx": [0], "func": "ry", "wires": [0]},
                {"input_idx": [1], "func": "ry", "wires": [1]},
                {"input_idx": [2], "func": "ry", "wires": [2]},
                {"input_idx": [3], "func": "ry", "wires": [3]},
            ]
        )

    def forward(self, x: torch.Tensor, y: torch.Tensor) -> torch.Tensor:
        x = x.reshape(1, -1)
        y = y.reshape(1, -1)
        self.ansatz(self.q_device, x, y)
        return torch.abs(self.q_device.states.view(-1)[0])


class EstimatorHead(nn.Module):
    """Classical regression head."""
    def __init__(self, input_dim: int) -> None:
        super().__init__()
        self.net = nn.Sequential(
            nn.Linear(input_dim, 8),
            nn.Tanh(),
            nn.Linear(8, 4),
            nn.Tanh(),
            nn.Linear(4, 1),
        )

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        return self.net(x)


class QuanvolutionHybridModel(tq.QuantumModule):
    """Hybrid architecture combining quantum quanvolution, transformer, and kernel modules."""
    def __init__(
        self,
        in_channels: int = 1,
        num_classes: int = 10,
        embed_dim: int = 64,
        num_heads: int = 4,
        ffn_dim: int = 128,
        num_blocks: int = 2,
        kernel_gamma: float = 1.0,
    ) -> None:
        super().__init__()
        self.qfilter = QuantumQuanvolutionFilter()
        self.transformer = nn.Sequential(
            *[QuantumTransformerBlock(embed_dim, num_heads, ffn_dim) for _ in range(num_blocks)]
        )
        self.kernel = QuantumKernel()
        self.classifier = nn.Linear(embed_dim, num_classes if num_classes > 2 else 1)
        self.estimator = EstimatorHead(embed_dim)

    def forward(self, x: torch.Tensor, mode: str = "classify") -> torch.Tensor:
        features = self.qfilter(x)
        seq_len = features.size(1) // 64
        feats = features.view(x.size(0), seq_len, 64)
        feats = self.transformer(feats)
        pooled = feats.mean(dim=1)
        if mode == "classify":
            return F.log_softmax(self.classifier(pooled), dim=-1)
        return self.estimator(pooled)

    def kernel_matrix(self, a: Sequence[torch.Tensor], b: Sequence[torch.Tensor]) -> np.ndarray:
        return np.array([[self.kernel(x, y).item() for y in b] for x in a])


__all__ = ["QuanvolutionHybridModel"]
