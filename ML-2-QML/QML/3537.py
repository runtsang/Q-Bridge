"""Hybrid quantum estimator that consumes classical parameters."""

from __future__ import annotations

import numpy as np
from qiskit.circuit import ParameterVector
from qiskit import QuantumCircuit
from qiskit.quantum_info import SparsePauliOp
from qiskit_machine_learning.neural_networks import EstimatorQNN
from qiskit.primitives import StatevectorEstimator


class HybridQNN:
    """
    Quantum EstimatorQNN that evaluates the expectation value of a Y
    observable on a two‑qubit circuit.  The circuit accepts two input
    parameters (features) and two weight parameters (generated by the
    classical network).  The `forward` method returns the scalar
    expectation value.
    """

    def __init__(self) -> None:
        # Parameter vectors
        self.input_params = ParameterVector("input", 2)
        self.weight_params = ParameterVector("weight", 2)

        # Build the circuit
        qc = QuantumCircuit(2)
        qc.ry(self.input_params[0], 0)
        qc.ry(self.input_params[1], 1)
        qc.cx(0, 1)
        qc.ry(self.weight_params[0], 0)
        qc.ry(self.weight_params[1], 1)

        # Observable: Y on qubit 0
        observable = SparsePauliOp.from_list([("Y" * qc.num_qubits, 1)])

        # Estimator primitive
        estimator = StatevectorEstimator()

        # Wrap in EstimatorQNN
        self.estimator_qnn = EstimatorQNN(
            circuit=qc,
            observables=observable,
            input_params=self.input_params,
            weight_params=self.weight_params,
            estimator=estimator,
        )

    def forward(self, inputs: np.ndarray, weight_params: np.ndarray) -> float:
        """
        Evaluate the estimator for given input features and weight parameters.

        Parameters
        ----------
        inputs : numpy.ndarray
            Shape (n_samples, 2) – the input parameters for the circuit.
        weight_params : numpy.ndarray
            Shape (n_samples, 2) – the weight parameters produced by the
            classical network.

        Returns
        -------
        float
            The expectation value of the Y observable for the first sample.
        """
        results = self.estimator_qnn.evaluate(
            inputs=inputs, weight_params=weight_params
        )
        # EstimatorQNN.evaluate returns a list of expectation values.
        return float(results[0])


__all__ = ["HybridQNN"]
